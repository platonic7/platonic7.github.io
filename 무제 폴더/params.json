{"name":"Hip Hop Life Of Jin","tagline":"","body":"## API에서 알아두어야 할 클래스들\r\n\r\njava.lang.String\r\n문자열작업을 쉽게 할 수 있도록 제공되는 API 클래스 \r\n\r\n기존 언어들에서 char[ ]을 이용하는 방식 대신에 편리하게 사용할 수 있다는 장점\r\n\r\n객체타입으로 사용한다는 특징 \r\n\r\n\r\n문자열의 생성 두 가지\r\n상수처럼 손 쉬운 방식 \r\nString str = “AAA”; (이걸 많이 선호함)\r\nnew를 활용하는 객체 방식 (이방식은 메모리상에 객체를 또 만들기에 사용 잘 안함)\r\nString str = new String(“AAA”);\r\n\r\n두 방식의 메모리 활용 방식의 차이가 존재\r\n\r\n‘==‘과 String의 equals( )\r\n‘==‘ 연산자\r\n메모리상에 같은 공간을 가리키는 지를 확인하는 연산자 \r\n\r\nequals( )\r\n두 개의 String 객체가 같은 문자열을 내용으로 가지는지를 확인하는 연산자\r\n```java\r\npublic static void main(String[] args) {\r\n\tString str1 = \"AAA\";\r\n\tString str2 = \"AAA\";\r\n\r\n\tSystem.out.println(str1 == str2); //ture\r\n\r\n\tString str3 = new String(\"AAA\");\r\n\tString str4 = new String(\"AAA\");\r\n\r\n\tSystem.out.println(str3 == str4); // false\r\n\r\n\tboolean result = str3.equals(str4);\r\n\r\n\tSystem.out.println(\"equals: \" + result); //true\r\n}\r\n// 내용물 비교할땐 무조건 equals를 써라\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}